# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from household_objects_database_msgs/SaveScanRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class SaveScanRequest(genpy.Message):
  _md5sum = "492f49d320aa26325df5fb078c297fa5"
  _type = "household_objects_database_msgs/SaveScanRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


int32 scaled_model_id


geometry_msgs/PoseStamped ground_truth_pose


string bagfile_location


string scan_source


string cloud_topic


================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['scaled_model_id','ground_truth_pose','bagfile_location','scan_source','cloud_topic']
  _slot_types = ['int32','geometry_msgs/PoseStamped','string','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       scaled_model_id,ground_truth_pose,bagfile_location,scan_source,cloud_topic

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SaveScanRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.scaled_model_id is None:
        self.scaled_model_id = 0
      if self.ground_truth_pose is None:
        self.ground_truth_pose = geometry_msgs.msg.PoseStamped()
      if self.bagfile_location is None:
        self.bagfile_location = ''
      if self.scan_source is None:
        self.scan_source = ''
      if self.cloud_topic is None:
        self.cloud_topic = ''
    else:
      self.scaled_model_id = 0
      self.ground_truth_pose = geometry_msgs.msg.PoseStamped()
      self.bagfile_location = ''
      self.scan_source = ''
      self.cloud_topic = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_i3I.pack(_x.scaled_model_id, _x.ground_truth_pose.header.seq, _x.ground_truth_pose.header.stamp.secs, _x.ground_truth_pose.header.stamp.nsecs))
      _x = self.ground_truth_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.ground_truth_pose.pose.position.x, _x.ground_truth_pose.pose.position.y, _x.ground_truth_pose.pose.position.z, _x.ground_truth_pose.pose.orientation.x, _x.ground_truth_pose.pose.orientation.y, _x.ground_truth_pose.pose.orientation.z, _x.ground_truth_pose.pose.orientation.w))
      _x = self.bagfile_location
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.scan_source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.cloud_topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.ground_truth_pose is None:
        self.ground_truth_pose = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.scaled_model_id, _x.ground_truth_pose.header.seq, _x.ground_truth_pose.header.stamp.secs, _x.ground_truth_pose.header.stamp.nsecs,) = _struct_i3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ground_truth_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ground_truth_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.ground_truth_pose.pose.position.x, _x.ground_truth_pose.pose.position.y, _x.ground_truth_pose.pose.position.z, _x.ground_truth_pose.pose.orientation.x, _x.ground_truth_pose.pose.orientation.y, _x.ground_truth_pose.pose.orientation.z, _x.ground_truth_pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bagfile_location = str[start:end].decode('utf-8')
      else:
        self.bagfile_location = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.scan_source = str[start:end].decode('utf-8')
      else:
        self.scan_source = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cloud_topic = str[start:end].decode('utf-8')
      else:
        self.cloud_topic = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_i3I.pack(_x.scaled_model_id, _x.ground_truth_pose.header.seq, _x.ground_truth_pose.header.stamp.secs, _x.ground_truth_pose.header.stamp.nsecs))
      _x = self.ground_truth_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.ground_truth_pose.pose.position.x, _x.ground_truth_pose.pose.position.y, _x.ground_truth_pose.pose.position.z, _x.ground_truth_pose.pose.orientation.x, _x.ground_truth_pose.pose.orientation.y, _x.ground_truth_pose.pose.orientation.z, _x.ground_truth_pose.pose.orientation.w))
      _x = self.bagfile_location
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.scan_source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.cloud_topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.ground_truth_pose is None:
        self.ground_truth_pose = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.scaled_model_id, _x.ground_truth_pose.header.seq, _x.ground_truth_pose.header.stamp.secs, _x.ground_truth_pose.header.stamp.nsecs,) = _struct_i3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ground_truth_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ground_truth_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.ground_truth_pose.pose.position.x, _x.ground_truth_pose.pose.position.y, _x.ground_truth_pose.pose.position.z, _x.ground_truth_pose.pose.orientation.x, _x.ground_truth_pose.pose.orientation.y, _x.ground_truth_pose.pose.orientation.z, _x.ground_truth_pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bagfile_location = str[start:end].decode('utf-8')
      else:
        self.bagfile_location = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.scan_source = str[start:end].decode('utf-8')
      else:
        self.scan_source = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cloud_topic = str[start:end].decode('utf-8')
      else:
        self.cloud_topic = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i3I = struct.Struct("<i3I")
_struct_7d = struct.Struct("<7d")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from household_objects_database_msgs/SaveScanResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import household_objects_database_msgs.msg

class SaveScanResponse(genpy.Message):
  _md5sum = "b49fccceeb56b964ed23601916a24082"
  _type = "household_objects_database_msgs/SaveScanResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

DatabaseReturnCode return_code

================================================================================
MSG: household_objects_database_msgs/DatabaseReturnCode
# return codes for database-related services

int32 UNKNOWN_ERROR = 1
int32 DATABASE_NOT_CONNECTED = 2
int32 DATABASE_QUERY_ERROR = 3
int32 SUCCESS = -1

int32 code"""
  __slots__ = ['return_code']
  _slot_types = ['household_objects_database_msgs/DatabaseReturnCode']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       return_code

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SaveScanResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.return_code is None:
        self.return_code = household_objects_database_msgs.msg.DatabaseReturnCode()
    else:
      self.return_code = household_objects_database_msgs.msg.DatabaseReturnCode()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.return_code.code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.return_code is None:
        self.return_code = household_objects_database_msgs.msg.DatabaseReturnCode()
      end = 0
      start = end
      end += 4
      (self.return_code.code,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.return_code.code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.return_code is None:
        self.return_code = household_objects_database_msgs.msg.DatabaseReturnCode()
      end = 0
      start = end
      end += 4
      (self.return_code.code,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
class SaveScan(object):
  _type          = 'household_objects_database_msgs/SaveScan'
  _md5sum = '855c7b6f2658d8a9de03dd9a5f7b1f1e'
  _request_class  = SaveScanRequest
  _response_class = SaveScanResponse
